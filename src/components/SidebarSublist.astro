---
import { flattenSidebar } from '@astrojs/starlight/utils/navigation';
import { Icon, Badge } from '@astrojs/starlight/components';

import type { SidebarEntry } from './Dropdown.astro';

interface Props {
  sublist: SidebarEntry[];
  nested?: boolean;
}

const { sublist, nested } = Astro.props;
---

<ul class:list={['text-white/70', { 'top-level': !nested }]}>
  {
    sublist.map(entry => {
      const isCurrentPage = entry.type === 'link'
        ? entry.isCurrent
        : flattenSidebar(entry.entries).some((i: any) => i.isCurrent);
      return (
        <li>
          {entry.type === 'link'
            ? (
              <a
                href={entry.href}
                aria-current={isCurrentPage && 'page'}
                aria-label={entry.label}
                class:list={['hover:text-primary py-1 block', entry.attrs.class]}
                {...entry.attrs}
              >
                <span>{entry.label}</span>
                {entry.badge && (
                  <Badge
                    variant={entry.badge.variant}
                    class={entry.badge.class}
                    text={entry.badge.text}
                  />
                )}
              </a>
            )
            : (
              <details
                open={isCurrentPage || !entry.collapsed}
                data-current={isCurrentPage}
              >
                <summary class="flex items-center justify-between cursor-pointer px-3 py-2">
                  <div class="group-label text-white">
                    <span>{entry.label}</span>
                    {entry.badge && (
                      <Badge
                        variant={entry.badge.variant}
                        class={entry.badge.class}
                        text={entry.badge.text}
                      />
                    )}
                  </div>
                  <Icon name="right-caret" class="caret" size="1.5rem" />
                </summary>
                <Astro.self sublist={entry.entries} nested />
              </details>
            )}
        </li>
      );
    })
  }
</ul>

<style>
  ul {
    --sl-sidebar-item-padding-inline: 1rem;
    list-style: none;
    padding: 0;
  }

  li {
    overflow-wrap: anywhere;
  }

  ul ul {
    padding-top: 12px;
    padding-bottom: 12px;
  }

  ul ul li {
    margin-inline-start: var(--sl-sidebar-item-padding-inline);
    border-inline-start: 1px solid var(--sl-color-hairline-light);
    padding-inline-start: var(--sl-sidebar-item-padding-inline);
  }

  summary::marker,
  summary::-webkit-details-marker {
    display: none;
  }

  .caret {
    transition: transform 0.2s ease-in-out;
    flex-shrink: 0;
  }
  :global([dir='rtl']) .caret {
    transform: rotateZ(180deg);
  }
  [open] > summary .caret {
    transform: rotateZ(90deg);
  }

  @media (min-width: 50rem) {
    .top-level > li + li {
      margin-top: 0.5rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const detailsElements = document.querySelectorAll('details');
    detailsElements.forEach((el) => {
      el.addEventListener('toggle', () => {
        if (el.open) {
          detailsElements.forEach((otherEl) => {
            if (otherEl !== el && otherEl.dataset.current !== 'true') {
              otherEl.removeAttribute('open');
            }
          });
        }
      });
    });
  });
</script>
