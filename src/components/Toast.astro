---
---

<div id="toast-container" class="fixed bottom-4 left-1/2 -translate-x-1/2 z-50 flex flex-col-reverse gap-2 items-center" />

<script>
  import CircleCheck from '@assets/icons/circle-check.svg?raw';
  import CircleX from '@assets/icons/circle-x.svg?raw';

  type ToastTheme = 'success' | 'error';

  interface ToastOptions {
    theme: ToastTheme;
    title?: string;
    body?: string;
    duration?: number;
  }

  const themeClasses = {
    success: {
      container: 'before:bg-[#489C72]',
      icon: 'text-[#489C72] bg-[#489C72]/12',
      iconSvg: CircleCheck,
      title: 'text-white',
      body: 'text-[#C8C5C5]',
    },
    error: {
      container: 'before:bg-[#DF5D58]',
      icon: 'text-[#DF5D58] bg-[#DF5D58]/12',
      iconSvg: CircleX,
      title: 'text-white',
      body: 'text-[#C8C5C5]',
    },
  };

  class Toast {
    element: HTMLElement;
    dismissTimeout: NodeJS.Timeout | null = null;
    id: string;

    constructor(options: ToastOptions) {
      this.id = 'toast-' + Date.now() + '-' + Math.floor(Math.random() * 1000);
      this.element = this.createToastElement(options);
    }

    createToastElement(options: ToastOptions): HTMLElement {
      const { theme, title, body } = options;

      // Create the toast element
      const toastEl = document.createElement('div');
      toastEl.className = 'flex flex-row items-center gap-4 px-4 py-3 rounded-lg bg-[#191919]/95 overflow-hidden'
        + ` ${themeClasses[theme].container} transition-all duration-300 transform translate-y-full opacity-0 w-full`
        + ' max-w-md before:absolute before:w-full before:h-1.25 before:left-0 before:bottom-0 before:blur-[1px]';
      toastEl.setAttribute('role', 'alert');
      toastEl.id = this.id;

      // Create the content
      let innerHTML = `
        <div class="rounded-full p-1 ${themeClasses[theme].icon}">
          ${themeClasses[theme].iconSvg}
        </div>
        <div class="flex flex-col gap-1.5">
          ${title ? `<div class="text-base font-semibold ${themeClasses[theme].title}">${title}</div>` : ''}
          ${body ? `<div class="text-sm ${themeClasses[theme].body}">${body}</div>` : ''}
        </div>
      `;

      toastEl.innerHTML = innerHTML;
      return toastEl;
    }

    show(duration = 3000) {
      // Add to DOM
      const container = document.getElementById('toast-container');
      if (!container) return;

      container.appendChild(this.element);

      // Trigger animation (we need a small delay to ensure the transition works)
      setTimeout(() => {
        this.element.classList.remove('translate-y-full', 'opacity-0');
        this.element.classList.add('translate-y-0', 'opacity-100');
      }, 10);

      // Auto-hide after duration
      if (duration > 0) {
        this.dismissTimeout = setTimeout(() => {
          this.hide();
        }, duration);
      }

      return this;
    }

    hide() {
      this.element.classList.remove('translate-y-0', 'opacity-100');
      this.element.classList.add('translate-y-full', 'opacity-0');

      // Remove from DOM after animation completes
      setTimeout(() => {
        this.element.remove();
      }, 300); // Match the duration in the CSS transition

      if (this.dismissTimeout) {
        clearTimeout(this.dismissTimeout);
        this.dismissTimeout = null;
      }
    }
  }

  // ToastManager to handle creating and tracking toasts
  class ToastManager {
    static instance: ToastManager;
    toasts: Map<string, Toast> = new Map();

    constructor() {
      if (ToastManager.instance) {
        return ToastManager.instance;
      }
      ToastManager.instance = this;
    }

    create(options: ToastOptions): Toast {
      const toast = new Toast(options);
      this.toasts.set(toast.id, toast);
      return toast;
    }

    show(options: ToastOptions): Toast {
      const toast = this.create(options);
      toast.show(options.duration);
      return toast;
    }

    success(title: string, body?: string, duration = 3000): Toast {
      return this.show({ theme: 'success', title, body, duration });
    }

    error(title: string, body?: string, duration = 3000): Toast {
      return this.show({ theme: 'error', title, body, duration });
    }

    hideAll() {
      this.toasts.forEach(toast => toast.hide());
    }
  }

  // Initialize the ToastManager when the component is loaded
  const toastManager = new ToastManager();

  // Make toast functions available globally
  document.addEventListener('DOMContentLoaded', () => {
    window.toast = {
      show: (options: ToastOptions) => toastManager.show(options),
      success: (title: string, body?: string, duration?: number) => toastManager.success(title, body, duration),
      error: (title: string, body?: string, duration?: number) => toastManager.error(title, body, duration),
      hideAll: () => toastManager.hideAll()
    };
  });

  // Add types to window object
  declare global {
    interface Window {
      toast: {
        show: (options: ToastOptions) => Toast;
        success: (title: string, body?: string, duration?: number) => Toast;
        error: (title: string, body?: string, duration?: number) => Toast;
        hideAll: () => void;
      };
    }
  }
</script>
